

class Solution {
  public:
    // Function to find maximum of each subarray of size k.
    vector<int> maxOfSubarrays(vector<int>& arr, int k) {
        // code here
        vector<int> result;
        deque<int> dq;
        int n = arr.size();

    for (int i = 0; i < n; i++) {
        // Remove elements outside the current window
        if (!dq.empty() && dq.front() == i - k) {
            dq.pop_front();
        }

        // Remove elements smaller than the current element as they are useless
        while (!dq.empty() && arr[dq.back()] < arr[i]) {
            dq.pop_back();
        }

        // Add the current element's index to the deque
        dq.push_back(i);

        // If we have processed at least k elements, add the max for the current window
        if (i >= k - 1) {
            result.push_back(arr[dq.front()]);
        }
    }

    return result;
    }
};
